# -*- coding: utf-8 -*-
"""Data Engineer Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ePJ7c3dh70wiP_PS5G5sciKGVYsLOffT
"""

import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

"""# Extraction of CSV file from Rar and storing it in Gdrive then import it in dataframe"""

# path where rar is stored
path_rar = '/content/drive/MyDrive/BE ZEN/test.rar'


# path where to extract rar
path_to_extract = '/content/drive/MyDrive/BE ZEN'


#path which contains extracted csv

path_csv = '/content/drive/MyDrive/BE ZEN/2022_02_08-02_30_31_AM.csv'

pip install unrar

pip install rarfile

import rarfile

rar = rarfile.RarFile(path_rar)
#rar.namelist()
#rar.printdir()
#rar.testrar()
#info = rar.infolist()[0]
#info.filename
#info.file_size
#17L
#info.date_time
rar.extractall(path = path_to_extract )

"""#Creating dataframe df"""

df = pd.read_csv(path_csv)

df.info()

df.head()

"""#Data Cleaning after creating DataFrame"""

#check for dupliated rows
no_of_duplicated_rows = len(df[df.duplicated()])
print(f'no of duplicated rows = {no_of_duplicated_rows}')

#removing duplicated rows from df

df = df[~df.duplicated()]

#info of df after removing duplicates

df.info()

# no of rows with null price_string
price_string_null = len(df[df['price_string'].isnull()])
price_string_null

# no of rows with non null price_string
price_string_not_null = len(df[~df['price_string'].isnull()])
price_string_not_null

# no of rows with non null price_string_unf columns
price_string_not_null_unf = len(df[~df['price_string_unf'].isnull()])
price_string_not_null_unf

pd.set_option('display.max_rows', 20)

#checking df where price_string_not_null_unf is not null
df[~df['price_string_unf'].isnull()]

#removing price_string_unf column from df because 
print(f'price_string_unf column has {(1-(price_string_not_null_unf/len(df)))*100} percent null value')
df.drop(columns = 'price_string_unf',inplace = True)

df.info()

# no of null product type
len(df[df['product_type'].isnull()])

#drop null product type from df
df = df[~df['product_type'].isnull()]

df.info()

"""# Checking distribution products_type containing null and non null prices in column price_string"""

df.groupby('product_type')['product_type'].count().sort_values(ascending = False)

type_of_products = pd.DataFrame(df.groupby('product_type')['product_type'].size().sort_values(ascending = False))

type_of_products

import seaborn as sns
import matplotlib.pyplot as plt

#Distribution type of products including null and non null prices

sns.displot(type_of_products,bins = 10)

plt.xlabel("count of product type")
plt.ylabel("No of product")
plt.title("Distribution type of products including null and non null prices")

#total product_type
len(list(df['product_type'].unique()))

"""# Checking distribution of level_1 containing null and non null prices in column price_string"""

# total type of level 1
df.level_1 .value_counts()

#total null value in level 1

len(df[df['level_1'].isnull()])

# data frame with type of level 1 and its count
type_of_level1 = pd.DataFrame(df.groupby('level_1')['level_1'].size().sort_values(ascending = False))

type_of_level1

# Distribution level 1 including null and non null prices

sns.displot(type_of_products,bins = 10)

plt.xlabel("count of level 1")
plt.ylabel("No of level 1 having specific count")
plt.title("Distribution level 1 including null and non null prices")

"""# Checking distribution of category containing null and non null prices in column price_string"""

# total type of category and its count
df.category.value_counts()

#total null value in product_type

len(df[df['category'].isnull()])

# data frame with type of category and its count
type_of_category = pd.DataFrame(df.groupby('category')['category'].size().sort_values(ascending = False))

type_of_category

#Distribution of type of category including null and non null prices

sns.displot(type_of_category,bins = 5)

plt.xlabel("count of type_of_category")
plt.ylabel("No of type_of_category having specific count")
plt.title("Distribution of type of category including null and non null prices")

"""# Checking Price_string column"""

#converting price_string column datatype to string

df['price_string'] = df['price_string'].astype('string')

df.info()

df['price_string'].head(10)

"""# EDA on price string with NULL value and comparision with
1. product type vs null price_sring
2. category vs null price_sring
3. level 1 vs null price_sring

with charts

# Seperating data frame consisting of null prices in price_string columns

Creating data frame "price_null_df" with null price_string
"""

# creating data frame with null price_string
price_null_df= df[df['price_string'].isnull()]

# null price and product list
product_with_price_null = price_null_df[['product_type','price_string']].reset_index()

"""# Count of Product type having  null price in price_string"""

#count of product_type which has price null
count_of_product_with_null_price = len(product_with_price_null)
count_of_product_with_null_price

# count of unique product with null prices

df.groupby('product_type')['price_string'].size()

unique_product_type_null_price_count_df = pd.DataFrame(df.groupby('product_type')['price_string'].size()).sort_values(by = 'price_string' ,ascending = False).reset_index()

unique_product_type_null_price_count_df

unique_product_type_null_price_coun_df = unique_product_type_null_price_count_df.rename(columns = {'price_string' : 'count'} )

unique_product_type_null_price_coun_df =unique_product_type_null_price_coun_df[unique_product_type_null_price_coun_df['count']>0]

unique_product_with_null_price_df = unique_product_type_null_price_coun_df.sort_values(by = 'count',ascending =False).reset_index()

# creating data frame having group of unique product type and its counts

unique_product_with_null_price_df

#Distribution Unique product with null price

sns.displot(data=unique_product_type_null_price_coun_df,x = 'count',bins =10)

plt.xlabel("Count of product type with null price")
plt.ylabel("No of product")
plt.title("Distribution Unique product with null price")

# top 10 product with null price 
top_product_null_value_count = unique_product_with_null_price_df.loc[:10]

# top 10 product with null price bar plot

sns.barplot(data=top_product_null_value_count,x = 'product_type',y = 'count')

plt.xlabel("Name of nique product type with null price")
plt.ylabel("Count of product")
plt.title("Top 10 Unique product with null price")
plt.xticks(rotation=90)

price_null_df.head()

"""# Count of category with null price in price_string column"""

#Check if category with null type with null price type exist


null_category = len(price_null_df[price_null_df['category'].isnull()])
print(f'No of null category with null price is = {null_category}')

df.groupby('category')['price_string'].count()

categoty_with_null_price =pd.DataFrame(df.groupby('category')['price_string'].size()).sort_values(by = 'price_string' ,ascending = False).rename(columns = {'price_string' : 'count'} ).reset_index()

categoty_with_null_price

#Distribution Unique category with null price

sns.displot(data=categoty_with_null_price,bins = 10)

plt.xlabel("Count of category with null price")
plt.ylabel(" No of category")
plt.title(" Distribution Unique category with null price")

# top 10 unique category with null price bar plot

sns.barplot(data=categoty_with_null_price,x = 'category',y = 'count')

plt.xlabel("Name of unique category with null price")
plt.ylabel("Count of product of this category")
plt.title("Unique category with null price")
plt.xticks(rotation=90)

"""# Count of level 1 having  null price in price_string column"""

df.info()

#Check if level 1 with null type with null price type exist


null_category = len(price_null_df[price_null_df['level_1'].isnull()])
print(f'No of null level 1 with null price is = {null_category}')

non_null_level1 = price_null_df[~price_null_df['level_1'].isnull()]

level1_with_null_price =pd.DataFrame(df.groupby('level_1')['price_string'].size()).sort_values(by = 'price_string' ,ascending = False).rename(columns = {'price_string' : 'count'} ).reset_index()

level1_with_null_price

# Distribution of level 1 with null price

sns.displot(data=level1_with_null_price,bins=5)

plt.xlabel("Count of level 1 with null price")
plt.ylabel(" Distribution of level 1")
plt.title(" Distribution of level 1 with null price")

# top 10 level 1 with null price
top10_level1_with_null_price = level1_with_null_price.loc[:10]
top10_level1_with_null_price

# top 10 level 1 with null price

sns.barplot(data=top10_level1_with_null_price,x = 'level_1',y = 'count')

plt.xlabel("Name of unique level 1 with null price")
plt.ylabel("Count of unique level_1")
plt.title("Unique level 1 with null price")
plt.xticks(rotation=90)

"""# EDA on data frame with non null prices in prices_string column"""

pd.set_option('display.max_rows', 15)

len(df[~df['price_string'].isnull()])/len(df)

# creating copy of dataframe df with alias df1

df1 = df.copy()

df1.loc[1:20]

"""# Creating seperate dataframe with name "non_null_prices_df" containing non null prices """

non_null_prices_df = df1[~df1['price_string'].isnull()]

non_null_prices_df.info()

non_null_prices_df['price_string'].value_counts()

def modify_price(x):
  '''add $ sign to Correct Product Prices in the correct format (eg: $56)'''

  if x[0]!='$':
    x1 = "$"+ x
    return x1
  else:
    return x

"""#Correcting Product Prices in the correct format (eg: $56)"""

# modifying price_string column to Correct Product Prices in the correct format (eg: $56)

non_null_prices_df['price_string'] = non_null_prices_df['price_string'].apply(modify_price)

non_null_prices_df['price_string'].value_counts()

non_null_prices_df.head()

def create_currency(x):
  '''return USD if first element is "$"'''
  if x[0] == '$':
    return 'USD'
  else:
    'Not'

# create currency name column for US dollar column value will be "USD"

non_null_prices_df['currency'] = non_null_prices_df['price_string'].apply(create_currency)

non_null_prices_df['currency'].value_counts()

def only_currency_value(x):
  '''converts currency to only value discard symbol such as $23.00 to  23.00'''
  if x[0] == '$':
    return x[1:]
  else:
    'Not'

# create currency value column for price

non_null_prices_df['value'] = non_null_prices_df['price_string'].apply(only_currency_value)

non_null_prices_df['value'].value_counts()

# Changing data type of value column to float to do calculation

non_null_prices_df['value']=non_null_prices_df['value'].astype("float")

non_null_prices_df.info()

"""# Distribution of all prices"""

#Distribution of price

sns.displot(non_null_prices_df['value'],bins= 10)

plt.xlabel("Price of product")
plt.ylabel("No of product")
plt.title("Title : Distribution of price")

non_null_prices_df.info()

"""# Count of products with non null prices in each unique product type"""

#creating df product type with count
product_type_count = pd.DataFrame(non_null_prices_df.groupby('product_type')['value'].size().sort_values(ascending= False).reset_index())

product_type_count = product_type_count.rename(columns={'value':'count'})

product_type_count

#distribution plot of count of product with non null prices

sns.displot(data=product_type_count, x = "count",bins = 10)

plt.xlabel("count of product")
plt.ylabel("No of product")
plt.title("Title : Distribution of count across product type with prices")

# top 10 product type with highest count of non_null prices

top_10_product_type_count = product_type_count[:10]

top_10_product_type_count

# Visualisation top 10 product type with highest count bar plot
sns.barplot(data=top_10_product_type_count,x = 'product_type',y = 'count')
plt.xlabel("Name of product type")
plt.ylabel("cCunt of product type")
plt.title("Top 10 product type with highest count")
plt.xticks(rotation=90)

"""# Avg price of products with prices in each Product Type"""

#creating df product ty with avg price
product_type_avg_price = pd.DataFrame(non_null_prices_df.groupby('product_type')['value'].mean().sort_values(ascending= False).reset_index())

product_type_avg_price = product_type_avg_price.rename(columns={'value':'avg_price'})

#keeping df product type with avg price greater than 0
product_type_avg_price = product_type_avg_price[product_type_avg_price['avg_price']>0]

#distribution plot of avg_price with respect to product type

sns.displot(data=product_type_avg_price, x = "avg_price")

plt.xlabel("Avg price of product")
plt.ylabel("No of product")
plt.title("Title : Distribution of avg price across product type")

# top 10 product type with highest avg price

top_10_product_type = product_type_avg_price[:10]

top_10_product_type

# Visualisation top 10 product type with highest avg price bar plot

sns.barplot(data=top_10_product_type,x = 'product_type',y = 'avg_price')

plt.xlabel("Name of product type")
plt.ylabel("Avg price of product type")
plt.title("Top 10 product type with highest avg value bar plot")
plt.xticks(rotation=90)

"""# Count of unique category with non null prices"""

#creating df category with count of non null prices

category_count = pd.DataFrame(non_null_prices_df.groupby('category')['value'].size().sort_values(ascending= False).reset_index())

category_count = category_count.rename(columns={'value':'count'})

category_count

#distribution plot of count of non null prices with respect to category

sns.displot(data=category_count, x = "count",bins = 10)
plt.xlabel("count of product")
plt.ylabel("No of product")
plt.title("Title : Distribution of count across category with prices")

# top 10 category_count with highest count of non null prices
top_10_category_count = category_count[:10]
top_10_category_count

# Visualisation top 10 category_count with highest count of non null prices

sns.barplot(data=top_10_category_count,x = 'category',y = 'count')

plt.xlabel("Name of category")
plt.ylabel("Count of null null price of the category")
plt.title("top 10 category with highest count of non null prices")
plt.xticks(rotation=90)

"""# Unique Categories with average price of product"""

#creating df category with avg price
category_avg_price = pd.DataFrame(non_null_prices_df.groupby('category')['value'].mean().sort_values(ascending= False).reset_index())

#list of category with avg price of products
category_avg_price = category_avg_price.rename(columns={'value':'avg_price'})
category_avg_price

#distribution plot of avg_price with respect to category

sns.displot(data=category_avg_price, x = "avg_price",bins = 10)

plt.xlabel("Avg price of product")
plt.ylabel("No of product")
plt.title("Title : Distribution of avg price across category")

# top 10 category with highest avg price
top_10_category = category_avg_price[:10]
top_10_category

# Visualisation top 10 cateory with highest avg price 
sns.barplot(data=top_10_category,x = 'category',y = 'avg_price')
plt.xlabel("Name of category")
plt.ylabel("Avg price of category")
plt.title("Top 10 category with highest avg value bar plot")
plt.xticks(rotation=90)

"""#Count of level 1 with non null prices"""

non_null_prices_df.info()

#creating df category with count of non null prices

level1_count = pd.DataFrame(non_null_prices_df.groupby('level_1')['value'].size().sort_values(ascending= False).reset_index())

level1_count = level1_count.rename(columns={'value':'count'})

level1_count

#distribution plot of level 1 with respect to count

sns.displot(data=level1_count, x = "count",bins = 10)

plt.xlabel("count of level1")
plt.ylabel("No. of level1_count")
plt.title("Title : Distribution of count across level1 with prices")

# top 10 level1 count with highest count of non null prices
top_10_level1_count = level1_count[:10]
top_10_level1_count

# Visualisation top 10 category_count with highest count of non null prices

sns.barplot(data=top_10_level1_count,x = 'level_1',y = 'count')

plt.xlabel("Name of level_1")
plt.ylabel("Count of null price of the level_1")
plt.title("top 10 level_1 with highest count of non null prices")
plt.xticks(rotation=90)

"""# Unique level1 with average price of product"""

#creating level1 with avg price
level_1_avg_price = pd.DataFrame(non_null_prices_df.groupby('level_1')['value'].mean().sort_values(ascending= False).reset_index())

#list of level_1 with avg price of products
level_1_avg_price = level_1_avg_price.rename(columns={'value':'avg_price'})
level_1_avg_price

#distribution plot of avg_price with respect to level_1

sns.displot(data=level_1_avg_price, x = "avg_price",bins = 10)

plt.xlabel("Avg price of product")
plt.ylabel("No of level 1")
plt.title("Title : Distribution of avg price across level_1")

# top 10 level 1 with highest avg value in level_1

top_10_level_1 = level_1_avg_price[:10]

top_10_level_1

# Visualisation top 10 level_1 with highest avg price 

sns.barplot(data=top_10_level_1,x = 'level_1',y = 'avg_price')

plt.xlabel("Name of level_1")
plt.ylabel("Avg price of level_1")
plt.title("Top 10 level_1 with highest avg value bar plot")
plt.xticks(rotation=90)

"""# Final dataframe combined and cleaned"""

data_frames = [price_null_df,non_null_prices_df]
df_optimised = pd.concat(data_frames)

df_optimised.info()

df_optimised.head()